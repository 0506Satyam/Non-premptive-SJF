#include<stdio.h>
#include<conio.h>
struct process
{
	int a_tym,b_tym,f_tym,w_tym,cpu;
	float pr;
}p[30];
int tym_unit=0,np,i,npl=0,d=0;
void showcase()
{	printf("\n Process number\t     arrival time\t    burst time");
	for(i=0;i<np;i++)
	{
		printf("\n\t   P%d \t       %d\t\t       %d",i+1,p[i].a_tym,p[i].b_tym);
	}
}
void test_case1()
{	np=4;
	p[0].a_tym=0;  p[0].b_tym=18; p[0].pr=1;
	p[1].a_tym=6;  p[1].b_tym=31; p[1].pr=1;
	p[2].a_tym=11; p[2].b_tym=19; p[2].pr=1;
	p[3].a_tym=15; p[3].b_tym=39; p[3].pr=1;	
	printf("\n Test cases are=> ");
	showcase();
}

int max_priority()
{
	float max=-1;
	int maxp=0;
	for(i=0;i<np;i++)
	{   
		if(p[i].a_tym>=0 && p[i].a_tym<=tym_unit && p[i].b_tym>0)
			{
			if(max<p[i].pr)
			   {
			     max=p[i].pr;
			     maxp=i;
			   }
			}
	}
	return maxp;
}

void processing(int n)
{	
	printf("\n\t\t time unit \t\t Process number");
	printf("\n\t\t     %d  \t\t\t P%d",tym_unit,n+1);
	p[n].b_tym--;
	p[n].cpu=1;
	if(p[n].b_tym==0){p[n].f_tym=tym_unit;}
	
	
	for(i=0;i<np;i++)
	{
	    if(i!=n && p[i].a_tym<tym_unit && p[i].b_tym!=0)
    	{
	        p[i].w_tym++;
	    }	
	}
	
	for(i=0;i<np;i++)
	{
	    if(p[i].b_tym!=0)
	    {		
        	p[i].pr=(float)p[i].w_tym/p[i].b_tym;
	        p[i].pr=p[i].pr+1;
	    }
	else {p[i].pr=0;}
	}	
}

void processing2()
{printf("\n\t\t time unit \t\t Process number");
 printf("\n\t\t     %d  ",tym_unit);}

int main()
{	int gp,flag,temp,j;
	float temp1=0,temp2=0;
	int avgw=0,avgtat=0,tat;
	test_case1();
	printf("\n\n Execution starting: \n");
	do
	{
	flag=0;
	for(i=0;i<np;i++)
	{
	if(p[i].b_tym!=0)
	flag=1;	
	} 
		
		if(flag==1)
		{ 	gp=max_priority();
			temp=p[gp].b_tym;
			if(temp==0)goto E;
			else{
			
			for(j=0;j<temp;j++)
			{E:
			tym_unit++;
			if(p[gp].b_tym>0)
				{processing(gp);}
		else
		{
			p[gp].pr=0;	
			processing2();
	   	 }}}
	   	 
		}
	}while(flag==1);
	
		printf("\n\n Total time units taken: %d",tym_unit);
		
		for(i=0;i<np;i++)
		{ tat=0;
		if(p[i].cpu==1)
			{
		    	tat=p[i].f_tym-p[i].a_tym;
				avgw=avgw+p[i].w_tym;
				avgtat=avgtat+tat;
				npl++;
			}
			printf("\n");
		  }
		if(npl>0)
		{
			temp1=(float)avgw/npl;
			temp2=(float)avgtat/npl;
		}
		printf("\n\n Average waiting time= %d/%d = %.2f",avgw,npl,temp1);
		printf("\n Average turn around time= %d/%d = %.2f",avgtat,npl,temp2);
	getch();
}
